import { LiveSocket } from "./liveSocket";
import { HtmlSafeString } from "../../pondserver";
import { LiveRouter } from "./liveRouter";
interface Constructor<T> {
    new (...args: any[]): T;
}
declare type ComponentConstructor = {
    new (...args: any[]): LiveComponent;
};
export interface Route {
    path: string;
    Component: ComponentConstructor;
}
export interface MountContext {
    path: string;
    params: Record<string, string>;
    query: Record<string, string>;
}
export interface RenderContext<LiveContext> {
    context: Readonly<LiveContext>;
    renderRoutes: () => HtmlSafeString;
}
export declare type CSSOutput = {
    string: HtmlSafeString;
    classes: Record<string, string>;
};
export declare type CSSGenerator = (statics: TemplateStringsArray, ...dynamics: unknown[]) => CSSOutput;
export interface LiveComponent<LiveContext extends Object = any, LiveEvent = any, LiveInfo = any> {
    routes: Route[];
    /**
     * @desc Called on every render to generate the CSS for the component.
     * @param context - The context of the component.
     * @param css - The CSS generator.
     */
    manageStyles?(context: LiveContext, css: CSSGenerator): CSSOutput;
    /**
     * @desc Called when the component is mounted.
     * @param context - The context of the component.
     * @param socket - The socket of user connection.
     * @param router - The router of this instance of the connection.
     */
    mount?(context: MountContext, socket: LiveSocket<LiveContext>, router: LiveRouter): void | Promise<void>;
    /**
     * @desc Called when the component is connected to the server over websockets.
     * @param context - The context of the component.
     * @param socket - The socket of user connection.
     * @param router - The router of this instance of the connection.
     */
    onRendered?(context: Readonly<LiveContext>, socket: LiveSocket<LiveContext>, router: LiveRouter): void | Promise<void>;
    /**
     * @desc Called when the component receives an event from the client.
     * @param event - The event name.
     * @param context - The context of the component.
     * @param socket - The socket of user connection.
     * @param router - The router of this instance of the connection.
     */
    onEvent?(event: LiveEvent, context: Readonly<LiveContext>, socket: LiveSocket<LiveContext>, router: LiveRouter): void | Promise<void>;
    /**
     * @desc Called when the component receives an info from the server.
     * @param info - The info content.
     * @param context - The context of the component.
     * @param socket - The socket of user connection.
     * @param router - The router of this instance of the connection.
     */
    onInfo?(info: LiveInfo, context: Readonly<LiveContext>, socket: LiveSocket<LiveContext>, router: LiveRouter): void | Promise<void>;
    /**
     * @desc Called when the component is disconnected from the server.
     * @param context - The context of the component.
     * @param socket - The socket of user connection.
     */
    onUnmount?(context: Readonly<LiveContext>, socket: LiveSocket<LiveContext>): void | Promise<void>;
    /**
     * @desc Called on every render to generate the HTML for the component.
     * @param context - The context of the component.
     * @param classes - The CSS classes generated by the component.
     */
    render(context: RenderContext<LiveContext>, classes: Record<string, string>): HtmlSafeString;
}
export declare function LiveFactory<LiveContext extends Object, LiveEvent, LiveInfo>(props: LiveComponent<LiveContext, LiveEvent, LiveInfo>): Constructor<LiveComponent<LiveContext, LiveEvent, LiveInfo>>;
export declare class Component<LiveContext extends Object = any, LiveEvent = any, LiveInfo = any> implements LiveComponent<LiveContext, LiveEvent, LiveInfo> {
    routes: Route[];
    /**
     * @desc Called on every render to generate the CSS for the component.
     * @param context - The context of the component.
     * @param css - The CSS generator.
     */
    manageStyles(context: LiveContext, css: CSSGenerator): CSSOutput;
    /**
     * @desc Called when the component is mounted.
     * @param context - The context of the component.
     * @param socket - The socket of user connection.
     * @param router - The router of this instance of the connection.
     */
    mount(context: MountContext, socket: LiveSocket<LiveContext>, router: LiveRouter): void;
    /**
     * @desc Called when the component is connected to the server over websockets.
     * @param context - The context of the component.
     * @param socket - The socket of user connection.
     * @param router - The router of this instance of the connection.
     */
    onRendered(context: Readonly<LiveContext>, socket: LiveSocket<LiveContext>, router: LiveRouter): void;
    /**
     * @desc Called when the component receives an event from the client.
     * @param event - The event name.
     * @param context - The context of the component.
     * @param socket - The socket of user connection.
     * @param router - The router of this instance of the connection.
     */
    onEvent(event: LiveEvent, context: Readonly<LiveContext>, socket: LiveSocket<LiveContext>, router: LiveRouter): void;
    /**
     * @desc Called when the component receives an info from the server.
     * @param info - The info content.
     * @param context - The context of the component.
     * @param socket - The socket of user connection.
     * @param router - The router of this instance of the connection.
     */
    onInfo(info: LiveInfo, context: Readonly<LiveContext>, socket: LiveSocket<LiveContext>, router: LiveRouter): void;
    /**
     * @desc Called when the component is disconnected from the server.
     * @param context - The context of the component.
     * @param socket - The socket of user connection.
     */
    onUnmount(context: Readonly<LiveContext>, socket: LiveSocket<LiveContext>): void;
    /**
     * @desc Called on every render to generate the HTML for the component.
     * @param context - The context of the component.
     * @param classes - The CSS classes generated by the component.
     */
    render(context: RenderContext<LiveContext>, classes: Record<string, string>): HtmlSafeString;
}
