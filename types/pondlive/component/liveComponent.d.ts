import {LiveSocket} from "./liveSocket";
import {CSSGenerator, CSSOutput, HtmlSafeString} from "../../pondserver";
import {LiveRouter} from "./liveRouter";
import {ContextProvider, PeakData} from "../broadcasters/contextManager";
import {BroadcastEvent} from "../broadcasters/broadcaster";

export declare type LiveComponent<LiveContext extends Object = any> = {
    new(...args: any[]): ComponentClass<LiveContext>;
};

export interface Route {
    path: string;
    Component: LiveComponent;
}

export interface LiveEvent<Events extends string = string> {
    type: Events;
    value: string | null;
    dataId: string | null;
}

export interface MountContext {
    path: string;
    params: Record<string, string>;
    query: Record<string, string>;
}

export declare type RenderContext = () => HtmlSafeString;

export interface LiveBuilder<LiveContext extends Object = any> {
    routes?: Route[];
    providers?: ContextProvider[];

    /**
     * @desc Called on every render to generate the CSS for the component.
     * @param css - The CSS generator.
     */
    manageStyles?(this: LiveContext, css: CSSGenerator): CSSOutput;

    /**
     * @desc Called when the component is mounted.
     * @param context - The context of the component.
     * @param socket - The socket of user connection.
     * @param router - The router of this instance of the connection.
     */
    mount?(context: MountContext, socket: LiveSocket<LiveContext>, router: LiveRouter): void | Promise<void>;

    /**
     * @desc Called when the value of a provided context changes.
     * @param context - The changed context.
     * @param socket - The socket of user connection.
     * @param router - The router of this instance of the connection.
     */
    onContextChange?(this: LiveContext, context: PeakData, socket: LiveSocket<LiveContext>, router: LiveRouter): void | Promise<void>;

    /**
     * @desc Called when the component is connected to the server over websockets.
     * @param socket - The socket of user connection.
     * @param router - The router of this instance of the connection.
     */
    onRendered?(this: LiveContext, socket: LiveSocket<LiveContext>, router: LiveRouter): void | Promise<void>;

    /**
     * @desc Called when the component receives an event from the client.
     * @param event - The event name.
     * @param socket - The socket of user connection.
     * @param router - The router of this instance of the connection.
     */
    onEvent?(this: LiveContext, event: LiveEvent, socket: LiveSocket<LiveContext>, router: LiveRouter): void | Promise<void>;

    /**
     * @desc Called when the component receives an info from the server.
     * @param info - The info content.
     * @param socket - The socket of user connection.
     * @param router - The router of this instance of the connection.
     */
    onInfo?(this: LiveContext, info: BroadcastEvent, socket: LiveSocket<LiveContext>, router: LiveRouter): void | Promise<void>;

    /**
     * @desc Called when the component is disconnected from the server.
     * @param socket - The socket of user connection.
     */
    onUnmount?(this: LiveContext, socket: LiveSocket<LiveContext>): void | Promise<void>;

    /**
     * @desc Called on every render to generate the HTML for the component.
     * @param routes - The context of the component.
     * @param classes - The CSS classes generated by the component.
     */
    render(this: LiveContext, routes: RenderContext, classes: Record<string, string>): HtmlSafeString;
}

export declare abstract class ComponentClass<LiveContext extends Object = any> implements LiveBuilder<LiveContext> {
    routes: Route[];
    providers: ContextProvider[];

    abstract manageStyles?(css: CSSGenerator): CSSOutput;

    abstract mount?(context: MountContext, socket: LiveSocket<LiveContext>, router: LiveRouter): void | Promise<void>;

    abstract onContextChange?(context: PeakData<any>, socket: LiveSocket<LiveContext>, router: LiveRouter): void | Promise<void>;

    abstract onRendered?(socket: LiveSocket<LiveContext>, router: LiveRouter): void | Promise<void>;

    abstract onEvent?(event: any, socket: LiveSocket<LiveContext>, router: LiveRouter): void | Promise<void>;

    abstract onInfo?(info: any, socket: LiveSocket<LiveContext>, router: LiveRouter): void | Promise<void>;

    abstract onUnmount?(socket: LiveSocket<LiveContext>): void | Promise<void>;

    abstract render(routes: RenderContext, classes: Record<string, string>): HtmlSafeString;
}

export declare function LiveFactory<LiveContext extends Object>(context: LiveBuilder<LiveContext>): LiveComponent<LiveContext>;
